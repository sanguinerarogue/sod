import{dk as e,dg as t,bY as a,A as i,ag as s,ah as r,c as n,dI as o,S as l,dp as c,dJ as d,r as u,bH as p,bI as f,bL as h,bE as m,bD as S,bJ as g,bK as b,E as T,a as k,Q as P,ae as F,dx as y,d as A,q as w,bS as I,af as C,at as M,u as x,dl as R,aF as v,l as O,C as D,au as E,b2 as B,x as H,T as J}from"./detailed_results-34fd0d97.chunk.js";import{q as N,s as W,t as L,u as $,v as U,m as V,a as j,w as q,r as G,b as _,x as z,l as K,M as Q,J as Y,o as X,T as Z,p as ee,I as te}from"./preset_utils-828125b5.chunk.js";function ae(e){return e.cooldowns.filter((e=>e.id)).map((e=>function(e,i){return t.fromJsonString(`{"schedule":{"schedule":"${e}","innerAction":{"castSpell":{"spellId":${a.toJsonString(i)}}}}}`)}(e.timings.map((e=>e.toFixed(1)+"s")).join(", "),e.id)))}const ie=N({fieldName:"innervateTarget",actionId:()=>i.fromSpellId(29166),extraCssClasses:["within-raid-sim-hide"],getValue:e=>e.getSpecOptions().innervateTarget?.type==s.Player,setValue:(e,t,a)=>{const i=t.getSpecOptions();i.innervateTarget=r.create({type:a?s.Player:s.Unknown,index:0}),t.setSpecOptions(e,i)}}),se=W({fieldName:"latencyMs",label:"Latency",labelTooltip:"Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued."});L({fieldName:"assumeBleedActive",label:"Assume Bleed Always Active",labelTooltip:"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.",extraCssClasses:["within-raid-sim-hide"]});const re={inputs:[$({fieldName:"minCombosForRip",label:"Min Rip CP",labelTooltip:"Combo Point threshold for allowing a Rip cast",float:!1,positive:!0}),$({fieldName:"maxWaitTime",label:"Max Wait Time",labelTooltip:"Max seconds to wait for an Energy tick to cast rather than powershifting",float:!0,positive:!0}),$({fieldName:"preroarDuration",label:"Pre-Roar Duration",labelTooltip:"Seconds remaining on a prior Savage Roar buff at the start of the pull",float:!0,positive:!0}),U({fieldName:"maintainFaerieFire",label:"Maintain Faerie Fire",labelTooltip:"If checked, bundle Faerie Fire refreshes with powershifts. Ignored if an external Faerie Fire debuff is selected in settings."}),U({fieldName:"precastTigersFury",label:"Pre-cast Tiger's Fury",labelTooltip:"If checked, model a pre-pull Tiger's Fury cast 3 seconds before initiating combat."}),U({fieldName:"useShredTrick",label:"Use Shred Trick",labelTooltip:'If checked, enable the "Shred trick" micro-optimization. This should only be used on short fight lengths with full powershifting uptime.'})]},ne={items:[{id:211510},{id:209422},{id:209692},{id:213087,enchant:247},{id:211512,enchant:847,rune:407977},{id:209524,enchant:823},{id:211423,rune:407995},{id:209421},{id:10410,rune:407988},{id:211511,enchant:247},{id:20439},{id:6321},{id:211449},{id:4381},{id:209577,enchant:723},{},{id:209576}]},oe={type:"TypeAPL",prepullActions:[{action:{activateAura:{auraId:{spellId:407988}}},doAtValue:{const:{val:"-8s"}}}],priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{catOptimalRotationAction:{maxWaitTime:2,minCombosForRip:3}}}]},le=V("Blank",{items:[]}),ce=V("Phase 1",ne),de={[n.Phase1]:[ce],[n.Phase2]:[]},ue=de[n.Phase1][0],pe=j("APL Default",oe),fe={[n.Phase1]:[pe],[n.Phase2]:[]},he={25:fe[n.Phase1][0],40:fe[n.Phase1][0]},me=o.create({maintainFaerieFire:!1,minCombosForRip:3,maxWaitTime:2,preroarDuration:26,precastTigersFury:!1,useShredTrick:!1}),Se=q("Simple Default",l.SpecFeralDruid,me),ge={name:"Standard",data:c.create({talentsString:"500005001--05"})},be={[n.Phase1]:[ge],[n.Phase2]:[]},Te=be[n.Phase1][0],ke=d.create({latencyMs:100,assumeBleedActive:!0}),Pe=u.create({flask:p.FlaskUnknown,food:f.FoodSmokedSagefish,defaultPotion:h.ManaPotion,defaultConjured:m.ConjuredMinorRecombobulator,mainHandImbue:S.BlackfathomSharpeningStone,agilityElixir:g.ElixirOfLesserAgility,strengthBuff:b.ElixirOfOgresStrength,boglingRoot:!0}),Fe={profession2:T.Leatherworking},ye=G(l.SpecFeralDruid,{cssClass:"feral-druid-sim-ui",cssScheme:"druid",knownIssues:[],warnings:[],epStats:[k.StatStrength,k.StatAgility,k.StatAttackPower,k.StatFeralAttackPower,k.StatMeleeHit,k.StatMeleeCrit,k.StatMeleeHaste,k.StatMana,k.StatIntellect,k.StatSpirit,k.StatMP5],epPseudoStats:[],epReferenceStat:k.StatAttackPower,displayStats:[k.StatHealth,k.StatStrength,k.StatAgility,k.StatAttackPower,k.StatFeralAttackPower,k.StatMeleeHit,k.StatMeleeCrit,k.StatMeleeHaste,k.StatMana,k.StatIntellect,k.StatSpirit,k.StatMP5],defaults:{gear:ue.gear,epWeights:_.fromMap({[k.StatStrength]:2.2,[k.StatAgility]:2.02,[k.StatAttackPower]:1,[k.StatFeralAttackPower]:1,[k.StatMeleeHit]:8.21,[k.StatMeleeCrit]:8.19,[k.StatMeleeHaste]:4.17,[k.StatMana]:.04,[k.StatIntellect]:.67,[k.StatSpirit]:.08,[k.StatMP5]:.46},{}),consumes:Pe,rotationType:P.TypeSimple,simpleRotation:me,talents:Te.data,specOptions:ke,raidBuffs:F.create({aspectOfTheLion:!0,arcaneBrilliance:!0,giftOfTheWild:y.TristateEffectRegular,battleShout:y.TristateEffectRegular}),partyBuffs:A.create({}),individualBuffs:w.create({blessingOfMight:y.TristateEffectImproved,blessingOfWisdom:y.TristateEffectRegular,boonOfBlackfathom:!0,ashenvalePvpBuff:!0,saygesFortune:I.SaygesDamage}),debuffs:C.create({judgementOfWisdom:!1,giftOfArthas:!1,exposeArmor:y.TristateEffectMissing,faerieFire:!1,sunderArmor:!0,curseOfRecklessness:!1,homunculi:0,curseOfVulnerability:!0,ancientCorrosivePoison:30}),other:Fe},playerIconInputs:[ie],rotationInputs:re,includeBuffDebuffInputs:[z,K,Q,Y],excludeBuffDebuffInputs:[S.ElementalSharpeningStone,S.DenseSharpeningStone,S.WildStrikes,X],otherInputs:{inputs:[se,Z,ee]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[...be[n.Phase1],...be[M]],rotations:[Se,...fe[n.Phase1],...fe[M]],gear:[le,...de[n.Phase1],...de[M]]},autoRotation:e=>he[e.getLevel()].rotation.rotation,simpleRotation:(a,i,s)=>{let[r,n]=function(a,i,s){return[[(n=i,e.fromJsonString(`{"action":{"castSpell":{"spellId":{"otherId":"OtherActionPotion"}}},"doAtValue":{"const":{"val":"${n||"-1s"}"}}}`))],[(r=s,r?t.fromJsonString(`{"condition":{"cmp":{"op":"OpGt","lhs":{"currentTime":{}},"rhs":{"const":{"val":"${r}"}}}},"autocastOtherCooldowns":{}}`):t.fromJsonString('{"autocastOtherCooldowns":{}}')),ae(a)].flat()];var r,n}(s);const o=Math.min(i.preroarDuration,33),l=e.fromJsonString(`{"action":{"activateAura":{"auraId":{"spellId":407988}}},"doAtValue":{"const":{"val":"-${(34-o).toFixed(2)}s"}}}`),c=e.fromJsonString('{"action":{"castSpell":{"spellId":{"spellId":5217,"rank":1}}},"doAtValue":{"const":{"val":"-3s"}}}'),d=t.fromJsonString(`{"catOptimalRotationAction":{"maxWaitTime":${i.maxWaitTime.toFixed(2)},"minCombosForRip":${i.minCombosForRip.toFixed(0)},"maintainFaerieFire":${i.maintainFaerieFire},"useShredTrick":${i.useShredTrick}}}`);return r.push(...[o>0?l:null,i.precastTigersFury?c:null].filter((e=>e))),n.push(...[d].filter((e=>e))),x.create({prepullActions:r,priorityList:n.map((e=>R.create({action:e})))})},raidSimPresets:[{spec:l.SpecFeralDruid,tooltip:v[l.SpecFeralDruid],defaultName:"Cat",iconUrl:O(D.ClassDruid,3),talents:Te.data,specOptions:ke,consumes:Pe,defaultFactionRaces:{[E.Unknown]:B.RaceUnknown,[E.Alliance]:B.RaceNightElf,[E.Horde]:B.RaceTauren},defaultGear:{[E.Unknown]:{},[E.Alliance]:{1:de[n.Phase1][0].gear},[E.Horde]:{1:de[n.Phase1][0].gear}}}]});class Ae extends te{constructor(e,t){super(e,t,ye)}calcArpTarget(e){let t=1399;e.hasTrinket(45931)?t-=751:e.hasTrinket(40256)&&(t-=612);const a=e.getEquippedItem(H.ItemSlotMainHand);return null!=a&&null!=a.enchant&&3225==a.enchant.effectId&&(t-=120),t}calcCritCap(e){let t=0;return e.hasRelic(47668)&&(t+=200),e.hasRelic(50456)&&(t+=220),(e.hasTrinket(47131)||e.hasTrinket(47464))&&(t+=510),(e.hasTrinket(47115)||e.hasTrinket(47303))&&(t+=450),(e.hasTrinket(44253)||e.hasTrinket(42987))&&(t+=300),(new _).withStat(k.StatMeleeCrit,45.91*(77.8-1.1*t*1.06*1.02/83.33))}async updateGear(e){return this.player.setGear(J.nextEventID(),e),await this.sim.updateCharacterStats(J.nextEventID()),_.fromProto(this.player.getCurrentStats().finalStats)}detectArpStackConfiguration(e){const t=_.fromProto(this.player.getCurrentStats().finalStats).getStat(k.StatArmorPenetration);return e>1e3&&t>648&&t+20<e+11}}export{Ae as F};
//# sourceMappingURL=sim-5527cdc8.chunk.js.map
