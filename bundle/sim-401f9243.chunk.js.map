{"version":3,"file":"sim-401f9243.chunk.js","sources":["../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tFlask,\n\tFood,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tProfession,\n\tRaidBuffs,\n\tTristateEffect,\n\tUnitReference,\n\tWeaponImbue\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tBalanceDruid_Options as BalanceDruidOptions,\n} from '../core/proto/druid.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\n\nexport const GearPresets = {\n  [Phase.Phase1]: [\n    GearPhase1,\n  ],\n  [Phase.Phase2]: [\n\t\tGearPhase2,\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultGear = GearPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\n\nexport const APLPresets = {\n  [Phase.Phase1]: [\n    APLPhase1,\n  ],\n  [Phase.Phase2]: [\n\t\tAPLPhase2,\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n  25: APLPresets[Phase.Phase1][0],\n  40: APLPresets[Phase.Phase2][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '50005003021',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5000500302541051',\n\t}),\n};\n\nexport const TalentPresets = {\n  [Phase.Phase1]: [\n    TalentsPhase1,\n  ],\n  [Phase.Phase2]: [\n\t\tTalentsPhase2\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultTalents = TalentPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n\tinnervateTarget: UnitReference.create(),\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n\tmainHandImbue: WeaponImbue.BlackfathomManaOil,\n\tenchantedSigil: EnchantedSigil.InnovationSigil,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tmoonkinAura: true,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultPartyBuffs = PartyBuffs.create({\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tfaerieFire: true,\n\tjudgementOfWisdom: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 18,\n\tprofession1: Profession.Enchanting,\n\tprofession2: Profession.Leatherworking,\n};\n","import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tClass,\n\tFaction,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as ConsumablesInputs from '../core/components/inputs/consumables.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecBalanceDruid, {\n\tcssClass: 'balance-druid-sim-ui',\n\tcssScheme: 'druid',\n\t// List any known bugs / issues here, and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatArcanePower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: \t0.43,\n\t\t\t[Stat.StatSpirit]: \t\t\t0.34,\n\t\t\t[Stat.StatSpellPower]: \t1,\n\t\t\t[Stat.StatArcanePower]: 0.49,\n\t\t\t[Stat.StatNaturePower]: 0.51,\n\t\t\t[Stat.StatSpellCrit]: \t0.82,\n\t\t\t[Stat.StatSpellHaste]: \t0.80,\n\t\t\t[Stat.StatMP5]: \t\t\t\t0.00,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: Presets.DefaultPartyBuffs,\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.SpellISBDebuff,\n\t\tBuffDebuffInputs.SpellScorchDebuff,\n\t\tBuffDebuffInputs.SpellWintersChillDebuff,\n\t\t...ConsumablesInputs.AGILITY_CONSUMES_CONFIG,\n\t\t...ConsumablesInputs.STRENGTH_CONSUMES_CONFIG,\n\t\t...ConsumablesInputs.FIRE_POWER_CONFIG,\n\t\t...ConsumablesInputs.FROST_POWER_CONFIG,\n\t\t...ConsumablesInputs.SHADOW_POWER_CONFIG,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.ReactionTime,\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[CURRENT_PHASE],\n\t\t],\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[CURRENT_PHASE],\n\t\t],\n\t},\n\n\tautoRotation: (player) => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\t\tdefaultName: 'Balance',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\n// noinspection TypeScriptValidateTypes\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["GearBlank","PresetUtils.makePresetGear","GearPhase1","Phase1Gear","GearPhase2","Phase2Gear","GearPresets","Phase","Phase1","Phase2","DefaultGear","CURRENT_PHASE","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase2","Phase2APL","APLPresets","DefaultAPLs","TalentsPhase1","name","data","SavedTalents","create","talentsString","TalentsPhase2","TalentPresets","DefaultTalents","DefaultOptions","BalanceDruidOptions","innervateTarget","UnitReference","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","mainHandImbue","WeaponImbue","BlackfathomManaOil","enchantedSigil","EnchantedSigil","InnovationSigil","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","powerWordFortitude","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","DefaultPartyBuffs","PartyBuffs","DefaultDebuffs","Debuffs","faerieFire","judgementOfWisdom","OtherDefaults","distanceFromTarget","profession1","Profession","Enchanting","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecBalanceDruid","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatArcanePower","StatNaturePower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","includeBuffDebuffInputs","excludeBuffDebuffInputs","BuffDebuffInputs.SpellISBDebuff","BuffDebuffInputs.SpellScorchDebuff","BuffDebuffInputs.SpellWintersChillDebuff","ConsumablesInputs.AGILITY_CONSUMES_CONFIG","ConsumablesInputs.STRENGTH_CONSUMES_CONFIG","ConsumablesInputs.FIRE_POWER_CONFIG","ConsumablesInputs.FROST_POWER_CONFIG","ConsumablesInputs.SHADOW_POWER_CONFIG","otherInputs","inputs","OtherInputs.ReactionTime","OtherInputs.DistanceFromTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearBlank","Presets.GearPresets","autoRotation","player","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","otherDefaults","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}