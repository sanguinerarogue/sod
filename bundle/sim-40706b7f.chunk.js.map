{"version":3,"file":"sim-40706b7f.chunk.js","sources":["../../../ui/hunter/inputs.ts","../../../ui/core/talents/hunter_pet.ts","../../../ui/hunter/presets.ts","../../../ui/hunter/sim.ts"],"sourcesContent":["import { ItemSlot, Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { makePetTypeInputConfig } from '../core/talents/hunter_pet.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_QuiverBonus as QuiverBonus,\n\tHunterRune,\n} from '../core/proto/hunter.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const WeaponAmmo = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, Ammo>({\n\tfieldName: 'ammo',\n\tnumColumns: 6,\n\tvalues: [\n\t\t{ value: Ammo.AmmoNone, tooltip: 'No Ammo' },\n\t\t{ actionId: () => ActionId.fromItemId(3030), value: Ammo.RazorArrow },\n\t\t{ actionId: () => ActionId.fromItemId(11285), value: Ammo.JaggedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(19316), value: Ammo.IceThreadedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(18042), value: Ammo.ThoriumHeadedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(12654), value: Ammo.Doomshot },\n\t\t{ actionId: () => ActionId.fromItemId(3033), value: Ammo.SolidShot },\n\t\t{ actionId: () => ActionId.fromItemId(11284), value: Ammo.AccurateSlugs },\n\t\t{ actionId: () => ActionId.fromItemId(19317), value: Ammo.IceThreadedBullet },\n\t\t{ actionId: () => ActionId.fromItemId(10513), value: Ammo.MithrilGyroShot },\n\t\t{ actionId: () => ActionId.fromItemId(11630), value: Ammo.RockshardPellets },\n\t\t{ actionId: () => ActionId.fromItemId(15997), value: Ammo.ThoriumShells },\n\t\t{ actionId: () => ActionId.fromItemId(13377), value: Ammo.MiniatureCannonBalls },\n\t],\n});\n\nexport const QuiverInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, QuiverBonus>({\n\textraCssClasses: [\n\t\t'quiver-picker',\n\t],\n\tfieldName: 'quiverBonus',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ color: '82e89d', value: QuiverBonus.QuiverNone },\n\t\t{ actionId: () => ActionId.fromItemId(18714), value: QuiverBonus.Speed15 },\n\t\t{ actionId: () => ActionId.fromItemId(2662), value: QuiverBonus.Speed14 },\n\t\t{ actionId: () => ActionId.fromItemId(8217), value: QuiverBonus.Speed13 },\n\t\t{ actionId: () => ActionId.fromItemId(7371), value: QuiverBonus.Speed12 },\n\t\t{ actionId: () => ActionId.fromItemId(3605), value: QuiverBonus.Speed11 },\n\t\t{ actionId: () => ActionId.fromItemId(3573), value: QuiverBonus.Speed10 },\n\t],\n});\n\nexport const PetTypeInput = makePetTypeInputConfig(true);\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'petUptime',\n\tlabel: 'Pet Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your pet will be alive.',\n\tpercent: true,\n});\n\nexport const SniperTrainingUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'sniperTrainingUptime',\n\tlabel: 'Sniper Training Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which you will have the buff.',\n\tpercent: true,\n\tshowWhen: (player) => player.getEquippedItem(ItemSlot.ItemSlotLegs)?.rune?.id == HunterRune.RuneLegsSniperTraining,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.gearChangeEmitter, player.specOptionsChangeEmitter]),\n});\n\nexport const HunterRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: StingType.NoSting },\n\t\t\t\t{ name: 'Scorpid Sting', value: StingType.ScorpidSting },\n\t\t\t\t{ name: 'Serpent Sting', value: StingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getSimpleRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import { Player } from '../player.js';\nimport { Spec } from '../proto/common.js';\nimport { Hunter_Options_PetType as PetType } from '../proto/hunter.js';\nimport { ActionId } from '../proto_utils/action_id.js';\n\n\nimport * as InputHelpers from '../components/input_helpers.js';\n\nexport function makePetTypeInputConfig(_: boolean): InputHelpers.TypedIconEnumPickerConfig<Player<Spec.SpecHunter>, PetType> {\n\treturn InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, PetType>({\n\t\tfieldName: 'petType',\n\t\tnumColumns: 6,\n\t\t//label: includeLabel ? 'Pet' : '',\n\t\tvalues: [\n\t\t\t// TODO: Organize pets into phases maybe?\n\t\t\t{ value: PetType.PetNone, tooltip: 'No Pet' },\n\t\t\t{ actionId: () => ActionId.fromPetName('Cat'), tooltip: 'Cat', value: PetType.Cat },\n\t\t\t{ actionId: () => ActionId.fromPetName('Wind Serpent'), tooltip: 'Wind Serpent', value: PetType.WindSerpent },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Wolf'), tooltip: 'Wolf', value: PetType.Wolf },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bat'), tooltip: 'Bat', value: PetType.Bat },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bear'), tooltip: 'Bear', value: PetType.Bear },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bird of Prey'), tooltip: 'Bird of Prey', value: PetType.BirdOfPrey },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Boar'), tooltip: 'Boar', value: PetType.Boar },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Carrion Bird'), tooltip: 'Carrion Bird', value: PetType.CarrionBird },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Chimaera'), tooltip: 'Chimaera (Exotic)', value: PetType.Chimaera },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Core Hound'), tooltip: 'Core Hound (Exotic)', value: PetType.CoreHound },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Crab'), tooltip: 'Crab', value: PetType.Crab },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Crocolisk'), tooltip: 'Crocolisk', value: PetType.Crocolisk },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Devilsaur'), tooltip: 'Devilsaur (Exotic)', value: PetType.Devilsaur },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Dragonhawk'), tooltip: 'Dragonhawk', value: PetType.Dragonhawk },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Gorilla'), tooltip: 'Gorilla', value: PetType.Gorilla },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Hyena'), tooltip: 'Hyena', value: PetType.Hyena },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Raptor'), tooltip: 'Raptor', value: PetType.Raptor },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Scorpid'), tooltip: 'Scorpid', value: PetType.Scorpid },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Serpent'), tooltip: 'Serpent', value: PetType.Serpent },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Silithid'), tooltip: 'Silithid (Exotic)', value: PetType.Silithid },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spider'), tooltip: 'Spider', value: PetType.Spider },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spirit Beast'), tooltip: 'Spirit Beast (Exotic)', value: PetType.SpiritBeast },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spore Bat'), tooltip: 'Spore Bat', value: PetType.SporeBat },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Tallstrider'), tooltip: 'Tallstrider', value: PetType.Tallstrider },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Turtle'), tooltip: 'Turtle', value: PetType.Turtle },\n\t\t],\n\t});\n}\n","import { Phase } from '../core/constants/other.js';\nimport {\n\tConsumes,\n\tFlask,\n\tFood,\n\tProfession,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options as HunterOptions,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_PetType as PetType,\n\tHunter_Options_QuiverBonus,\n} from '../core/proto/hunter.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport Phase1Gear from './gear_sets/phase1.json';\nimport Phase2Gear from './gear_sets/phase2.json';\n\nexport const GearBeastMasteryPhase1 = PresetUtils.makePresetGear('P1 Beast Mastery', Phase1Gear, { talentTree: 0 })\nexport const GearMarksmanPhase1 = PresetUtils.makePresetGear('P1 Marksmanship', Phase1Gear, { talentTree: 1 })\nexport const GearSurvivalPhase1 = PresetUtils.makePresetGear('P1 Survival', Phase1Gear, { talentTree: 2 })\n\nexport const GearPhase2 = PresetUtils.makePresetGear('P2 Gear', Phase2Gear)\n\nexport const GearPresets = {\n  \t[Phase.Phase1]: [\n    \tGearBeastMasteryPhase1,\n\t\tGearMarksmanPhase1,\n\t\tGearSurvivalPhase1,\n  \t],\n  \t[Phase.Phase2]: [\n\t\tGearPhase2\n  \t]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultGear = GearPhase2;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport MeleeWeaveP1 from './apls/melee.weave.p1.json';\nimport MeleeP2 from './apls/melee.p2.json';\n\nexport const APLMeleeWeavePhase1 = PresetUtils.makePresetAPLRotation('Melee Weave P1', MeleeWeaveP1);\nexport const APLMeleePhase2 = PresetUtils.makePresetAPLRotation('Melee P2', MeleeP2);\n\nexport const APLPresets = {\n  \t[Phase.Phase1]: [\n    \tAPLMeleeWeavePhase1,\n  \t],\n  \t[Phase.Phase2]: [\n\t\tAPLMeleePhase2\n  \t]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultAPLs: Record<number, Record<number, PresetUtils.PresetRotation>> = {\n  25: {\n\t\t0: APLPresets[Phase.Phase1][0],\n\t\t1: APLPresets[Phase.Phase1][0],\n\t\t2: APLPresets[Phase.Phase1][0],\n\t},\n  40: {\n\t\t0: APLPresets[Phase.Phase2][0],\n\t\t1: APLPresets[Phase.Phase2][0],\n\t\t2: APLPresets[Phase.Phase2][0],\n\t}\n};\n\nexport const DefaultSimpleRotation = HunterRotation.create({\n\ttype: RotationType.SingleTarget,\n\tsting: StingType.SerpentSting,\n\tmultiDotSerpentSting: true,\n});\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsBeastMasteryPhase1 = {\n\tname: 'P1 Beast Mastery',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '53000200501',\n\t}),\n};\n\nexport const TalentsMarksmanPhase1 = {\n\tname: 'P1 Marksmanship',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-050515',\n\t}),\n};\n\nexport const TalentsSurvivalPhase1 = {\n\tname: 'P1 Survival',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--33502001101',\n\t}),\n};\n\nexport const TalentsSurvivalPhase2 = {\n\tname: 'P2 Survival',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--335020051030315',\n\t}),\n};\n\nexport const TalentPresets = {\n  \t[Phase.Phase1]: [\n    \tTalentsBeastMasteryPhase1,\n\t\tTalentsMarksmanPhase1,\n\t\tTalentsSurvivalPhase1,\n  \t],\n \t[Phase.Phase2]: [\n\t\tTalentsSurvivalPhase2\n  \t]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultTalentsBeastMastery \t= TalentPresets[Phase.Phase1][0];\nexport const DefaultTalentsMarksman \t\t= TalentPresets[Phase.Phase1][1];\nexport const DefaultTalentsSurvival \t\t= TalentPresets[Phase.Phase1][2];\n\nexport const DefaultTalents = TalentsSurvivalPhase2;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = HunterOptions.create({\n\tammo: Ammo.JaggedArrow,\n\tpetType: PetType.WindSerpent,\n\tpetTalents: {},\n\tpetUptime: 1,\n\tquiverBonus: Hunter_Options_QuiverBonus.Speed14\n});\n\nexport const BMDefaultOptions = HunterOptions.create({\n\tammo: Ammo.JaggedArrow,\n\tpetType: PetType.Cat,\n\tpetTalents: {},\n\tpetUptime: 1,\n\tquiverBonus: Hunter_Options_QuiverBonus.Speed14\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n\nexport const OtherDefaults = {\n  profession1: Profession.Engineering,\n  profession2: Profession.Leatherworking,\n}\n","import { Phase } from '../core/constants/other.js';\nimport {\n\tClass,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tRangedWeaponType,\n\tSpec,\n\tStat, PseudoStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as HunterInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecHunter, {\n\tcssClass: 'hunter-sim-ui',\n\tcssScheme: 'hunter',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t\tStat.StatSpellPower,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatRangedDps,\n\t],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatRangedAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t\tStat.StatSpellPower,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecHunter>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\tconst rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\tif (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t}\n\t\tif (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\t\tif (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStamina]: 0.5,\n\t\t\t[Stat.StatAgility]: 2.65,\n\t\t\t[Stat.StatIntellect]: 1.1,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 2,\n\t\t\t[Stat.StatMeleeCrit]: 1.5,\n\t\t\t[Stat.StatMeleeHaste]: 1.39,\n\t\t\t[Stat.StatArmorPenetration]: 1.32,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\tsimpleRotation: Presets.DefaultSimpleRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\taspectOfTheLion: true,\n\t\t\tarcaneBrilliance: true,\n\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\thomunculi: 70, // 70% average uptime default\n\t\t\tfaerieFire: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tHunterInputs.PetTypeInput,\n\t\tHunterInputs.WeaponAmmo,\n\t\tHunterInputs.QuiverInput,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: HunterInputs.HunterRotationConfig,\n\tpetConsumeInputs: [\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.StaminaBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tHunterInputs.PetUptime,\n\t\t\tHunterInputs.SniperTrainingUptime,\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[Phase.Phase2],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[Phase.Phase2],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[Phase.Phase2],\n\t\t],\n\t},\n\n\tautoRotation: (player) => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()][player.getTalentTree()].rotation.rotation!;\n\t},\n\t\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Beast Mastery Hunter',\n\t\t\tdefaultName: 'Beast Mastery',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 0),\n\n\t\t\ttalents: Presets.DefaultTalentsBeastMastery.data,\n\t\t\tspecOptions: Presets.BMDefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Marksmanship Hunter',\n\t\t\tdefaultName: 'Marksmanship',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 1),\n\t\t\ttalents: Presets.DefaultTalentsMarksman.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Survival Hunter',\n\t\t\tdefaultName: 'Survival',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 2),\n\n\t\t\ttalents: Presets.DefaultTalentsSurvival.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][2].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][2].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class HunterSimUI extends IndividualSimUI<Spec.SpecHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecHunter>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["WeaponAmmo","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Ammo","AmmoNone","tooltip","actionId","ActionId","fromItemId","RazorArrow","JaggedArrow","IceThreadedArrow","ThoriumHeadedArrow","Doomshot","SolidShot","AccurateSlugs","IceThreadedBullet","MithrilGyroShot","RockshardPellets","ThoriumShells","MiniatureCannonBalls","QuiverInput","extraCssClasses","color","QuiverBonus","QuiverNone","Speed15","Speed14","Speed13","Speed12","Speed11","Speed10","PetTypeInput","PetType","PetNone","fromPetName","Cat","WindSerpent","PetUptime","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","percent","SniperTrainingUptime","showWhen","player","getEquippedItem","ItemSlot","ItemSlotLegs","rune","id","HunterRune","RuneLegsSniperTraining","changeEmitter","TypedEvent","onAny","gearChangeEmitter","specOptionsChangeEmitter","HunterRotationConfig","inputs","InputHelpers.makeRotationEnumInput","name","RotationType","SingleTarget","Aoe","StingType","NoSting","ScorpidSting","SerpentSting","getSimpleRotation","type","InputHelpers.makeRotationBooleanInput","rotationChangeEmitter","talentsChangeEmitter","GearBeastMasteryPhase1","PresetUtils.makePresetGear","Phase1Gear","talentTree","GearMarksmanPhase1","GearSurvivalPhase1","GearPhase2","Phase2Gear","GearPresets","Phase","Phase1","Phase2","DefaultGear","APLMeleeWeavePhase1","PresetUtils.makePresetAPLRotation","MeleeWeaveP1","APLMeleePhase2","MeleeP2","APLPresets","DefaultAPLs","DefaultSimpleRotation","HunterRotation","create","sting","multiDotSerpentSting","TalentsBeastMasteryPhase1","data","SavedTalents","talentsString","TalentsMarksmanPhase1","TalentsSurvivalPhase1","TalentsSurvivalPhase2","TalentPresets","DefaultTalentsBeastMastery","DefaultTalentsMarksman","DefaultTalentsSurvival","DefaultTalents","DefaultOptions","HunterOptions","ammo","petType","petTalents","petUptime","quiverBonus","Hunter_Options_QuiverBonus","BMDefaultOptions","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","OtherDefaults","profession1","Profession","Engineering","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecHunter","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStamina","StatIntellect","StatStrength","StatAgility","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatMP5","StatSpellPower","epPseudoStats","PseudoStat","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","addStat","getTalents","lethalShots","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","rangedWeapon","ItemSlotRanged","enchant","effectId","getRace","Race","RaceDwarf","item","rangedWeaponType","RangedWeaponType","RangedWeaponTypeGun","RaceTroll","RangedWeaponTypeBow","talents","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","simpleRotation","Presets.DefaultSimpleRotation","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","RaidBuffs","aspectOfTheLion","arcaneBrilliance","powerWordFortitude","TristateEffect","TristateEffectImproved","giftOfTheWild","battleShout","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfWisdom","blessingOfMight","debuffs","Debuffs","homunculi","faerieFire","playerIconInputs","HunterInputs.PetTypeInput","HunterInputs.WeaponAmmo","HunterInputs.QuiverInput","rotationInputs","HunterInputs.HunterRotationConfig","petConsumeInputs","includeBuffDebuffInputs","BuffDebuffInputs.StaminaBuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetUptime","HunterInputs.SniperTrainingUptime","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getLevel","getTalentTree","rotation","raidSimPresets","spec","defaultName","iconUrl","getSpecIcon","Class","ClassHunter","Presets.DefaultTalentsBeastMastery","Presets.BMDefaultOptions","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","RaceNightElf","Horde","RaceOrc","defaultGear","Presets.DefaultTalentsMarksman","Presets.DefaultTalentsSurvival","HunterSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}