{"version":3,"file":"sim-67c467dc.chunk.js","sources":["../../../ui/warlock/inputs.ts","../../../ui/warlock/presets.ts","../../../ui/warlock/sim.ts"],"sourcesContent":["import {\n\tWarlockOptions_Armor as Armor,\n\tWarlockOptions_Summon as Summon,\n\tWarlockOptions_WeaponImbue as WeaponImbue,\n\tWarlockOptions_MaxFireboltRank as MaxFireboltRank\n} from '../core/proto/warlock.js';\n\nimport { Player } from '../core/player.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ArmorInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Armor>({\n\tfieldName: 'armor',\n\tvalues: [\n\t\t{ value: Armor.NoArmor, tooltip: 'No Armor' },\n\t\t{ actionId: () => ActionId.fromSpellId(11735), value: Armor.DemonArmor },\n\t],\n});\n\nexport const WeaponImbueInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, WeaponImbue>({\n\tfieldName: 'weaponImbue',\n\tvalues: [\n\t\t{ value: WeaponImbue.NoWeaponImbue, tooltip: 'No Weapon Stone' },\n\t\t// TODO: Classic warlock weapon stone id based on level\n\t\t{ actionId: () => ActionId.fromItemId(13701), value: WeaponImbue.Firestone },\n\t\t{ actionId: () => ActionId.fromItemId(13603), value: WeaponImbue.Spellstone },\n\t],\n});\n\nexport const PetInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Summon>({\n\tfieldName: 'summon',\n\tvalues: [\n\t\t{ value: Summon.NoSummon, tooltip: 'No Pet' },\n\t\t{ actionId: () => ActionId.fromSpellId(688), value: Summon.Imp },\n\t\t{ actionId: () => ActionId.fromSpellId(697), value: Summon.Voidwalker },\n\t\t{ actionId: () => ActionId.fromSpellId(712), value: Summon.Succubus },\n\t\t{ actionId: () => ActionId.fromSpellId(691), value: Summon.Felhunter },\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n});\n\nexport const ImpFireboltRank = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, MaxFireboltRank>({\n\tfieldName: 'maxFireboltRank',\n\tshowWhen: (player) => player.getSpecOptions().summon == Summon.Imp,\n\tvalues: [\n\t\t{ value: MaxFireboltRank.NoMaximum, tooltip: 'Max' },\n\t\t{ actionId: () => ActionId.fromSpellId(3110), value: MaxFireboltRank.Rank1 },\n\t\t{ actionId: () => ActionId.fromSpellId(7799), value: MaxFireboltRank.Rank2 },\n\t\t{ actionId: () => ActionId.fromSpellId(7800), value: MaxFireboltRank.Rank3 },\n\t\t{ actionId: () => ActionId.fromSpellId(7801), value: MaxFireboltRank.Rank4 },\n\t\t{ actionId: () => ActionId.fromSpellId(7802), value: MaxFireboltRank.Rank5 },\n\t\t{ actionId: () => ActionId.fromSpellId(11762), value: MaxFireboltRank.Rank6 },\n\t\t{ actionId: () => ActionId.fromSpellId(11763), value: MaxFireboltRank.Rank7 },\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n});\n","import { Phase } from '../core/constants/other.js';\nimport {\n\tAgilityElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tExplosive,\n\tFirePowerBuff,\n\tFlask,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tSpellPowerBuff,\n\tTristateEffect,\n\tWeaponImbue\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport {\n\tWarlockOptions_Armor as Armor,\n\tWarlockOptions_Summon as Summon,\n\tWarlockOptions as WarlockOptions,\n\tWarlockOptions_WeaponImbue as WarlockWeaponImbue,\n} from '../core/proto/warlock.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport { Player } from '../core/player.js';\n\n// gear\n// P1\nimport DestructionGear from './gear_sets/p1/destruction.gear.json';\n// P2\nimport FireImpGear from './gear_sets/p2/fire.imp.gear.json';\nimport FireSuccubusGear from './gear_sets/p2/fire.succubus.gear.json';\nimport ShadowGear from './gear_sets/p2/shadow.gear.json';\n\n// apls\n// P1\nimport DestroP1APL from './apls/p1/destruction.apl.json';\n// P2\nimport DestroMgiAPL from './apls/p2/fire.imp.apl.json';\nimport DestroConflagAPL from './apls/p2/fire.conflag.apl.json';\nimport DemonologyAPL from './apls/p2/demonology.apl.json';\nimport AfflictionAPL from './apls/p2/affliction.apl.json';\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearDestructionPhase1 = PresetUtils.makePresetGear('Destruction', DestructionGear, { customCondition: (player) => player.getLevel() == 25 });\n\nexport const FireImpGearPreset = PresetUtils.makePresetGear('Fire Imp', FireImpGear, { customCondition: (player) => player.getLevel() == 40 });\nexport const FireSuccubusGearPreset = PresetUtils.makePresetGear('Fire Succubus', FireSuccubusGear, { customCondition: (player) => player.getLevel() == 40 });\nexport const ShadowGearPreset = PresetUtils.makePresetGear('Shadow', ShadowGear, { customCondition: (player) => player.getLevel() == 40 });\n\nexport const GearPresets = {\n  \t[Phase.Phase1]: [\n\t\tGearDestructionPhase1,\n\t],\n\t[Phase.Phase2]: [\n\t\tFireImpGearPreset,\n\t\tFireSuccubusGearPreset,\n\t\tShadowGearPreset,\n\t]\n};\n\nexport const DefaultGear = FireImpGearPreset;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const RotationDestructionPhase1 = PresetUtils.makePresetAPLRotation('Destruction', DestroP1APL, { customCondition: (player) => player.getLevel() == 25 });\n\nexport const DestroMgiRotationPreset = PresetUtils.makePresetAPLRotation('Destro Imp', DestroMgiAPL, { customCondition: (player) => player.getLevel() == 40 });\nexport const DestroConflagRotationPreset = PresetUtils.makePresetAPLRotation('Destro Conflag', DestroConflagAPL, { customCondition: (player) => player.getLevel() == 40 });\nexport const DemonologyRotationPreset = PresetUtils.makePresetAPLRotation('Demonology', DemonologyAPL, { customCondition: (player) => player.getLevel() == 40 });\nexport const AfflictionRotationPreset = PresetUtils.makePresetAPLRotation('Affliction', AfflictionAPL, { customCondition: (player) => player.getLevel() == 40 });\n\nexport const APLPresets = {\n  \t[Phase.Phase1]: [\n\t\tRotationDestructionPhase1,\n\t],\n\t[Phase.Phase2]: [\n\t\tDestroMgiRotationPreset,\n\t\tDestroConflagRotationPreset,\n\t\tDemonologyRotationPreset,\n\t\tAfflictionRotationPreset\n\t]\n};\n\nexport const DefaultAPLs: Record<number, Record<number, PresetUtils.PresetRotation>> = {\n  \t25: {\n\t\t0: RotationDestructionPhase1,\n\t\t1: RotationDestructionPhase1,\n\t\t2: RotationDestructionPhase1,\n\t},\n  \t40: {\n\t\t0: AfflictionRotationPreset,\n\t\t1: DemonologyRotationPreset,\n\t\t2: DestroMgiRotationPreset,\n\t}\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const DestroP1Talents = {name: 'Destruction P1', data: SavedTalents.create({ talentsString: '-03-0550201' }), enableWhen: (player:Player<any>) => player.getLevel() == 25};\n\nexport const DestroMgiTalents = {name: 'Destro Imp', data: SavedTalents.create({ talentsString: '-01-055020512000415' }), enableWhen: (player:Player<any>) => player.getLevel() == 40};\nexport const DestroConflagTalents = {name: 'Destro Conflag', data: SavedTalents.create({ talentsString: '--0550205120005141' }), enableWhen: (player:Player<any>) => player.getLevel() == 40};\nexport const DemonologyTalents = {name: 'Demonology', data: SavedTalents.create({ talentsString: '-2050033132501051' }), enableWhen: (player:Player<any>) => player.getLevel() == 40};\nexport const AfflictionTalents = {name: 'Affliction', data: SavedTalents.create({ talentsString: '3500253012201105--1' }), enableWhen: (player:Player<any>) => player.getLevel() == 40};\n\nexport const TalentPresets = {\n  \t[Phase.Phase1]: [\n    \tDestroP1Talents,\n  \t],\n  \t[Phase.Phase2]: [\n\t\tDestroMgiTalents,\n\t\tDestroConflagTalents,\n\t\tDemonologyTalents,\n\t\tAfflictionTalents\n \t]\n};\n\nexport const DefaultTalents = DestroMgiTalents;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = WarlockOptions.create({\n\tarmor: Armor.DemonArmor,\n\tsummon: Summon.Imp,\n\tweaponImbue: WarlockWeaponImbue.NoWeaponImbue,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodSmokedSagefish,\n\tdefaultPotion: Potions.GreaterManaPotion,\n\tmainHandImbue: WeaponImbue.LesserWizardOil,\n\tfirePowerBuff: FirePowerBuff.ElixirOfFirepower,\n\tspellPowerBuff: SpellPowerBuff.LesserArcaneElixir,\n\tenchantedSigil: EnchantedSigil.InnovationSigil,\n\tagilityElixir: AgilityElixir.ElixirOfAgility,\n\tfillerExplosive: Explosive.ExplosiveEzThroRadiationBomb,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectRegular,\n\tthorns: TristateEffect.TristateEffectRegular,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n\tsparkOfInspiration: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\thomunculi: 100,\n\tfaerieFire: true,\n\timprovedScorch: true,\n\tcurseOfElements: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 25,\n\tprofession1: Profession.Enchanting,\n\tprofession2: Profession.Tailoring,\n\tchannelClipDelay: 150,\n};\n","import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tClass,\n\tFaction,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as ConsumablesInputs from '../core/components/inputs/consumables.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as WarlockInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecWarlock, {\n\tcssClass: 'warlock-sim-ui',\n\tcssScheme: 'warlock',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatStamina,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatFirePower,\n\t\tStat.StatShadowPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t\tStat.StatSpellPenetration,\n\t],\n\t// Reference stat against which to calculate EP. DPS classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatIntellect,\n\t\tStat.StatStamina,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatFirePower,\n\t\tStat.StatShadowPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatSpellPenetration,\n\t\tStat.StatMP5,\n\t],\n\t// TODO: Figure out a way to get the stat but right now this comes out wrong\n\t// due to pet scaling and player getting some dynamic buffs which we cant get here\n\t// modifyDisplayStats: (player: Player<Spec.SpecWarlock>) => {\n\t// \tlet stats = new Stats();\n\t\t\n\t// \t// Demonic Knowledge rune\n\t// \tif (player.getEquippedItem(ItemSlot.ItemSlotFeet)?.rune?.id == WarlockRune.RuneBootsDemonicKnowledge) {\n\t// \t\tlet petIntStaMap = new Map<number, Map<WarlockOptions_Summon, number>>([\n\t// \t\t\t[25, new Map<WarlockOptions_Summon, number>([\n\t// \t\t\t\t[WarlockOptions_Summon.Imp, 49 + 94],\n\t// \t\t\t\t[WarlockOptions_Summon.Succubus, 87 + 35],\n\t// \t\t\t])],\n\t// \t\t\t[40, new Map<WarlockOptions_Summon, number>([\n\t// \t\t\t\t[WarlockOptions_Summon.Imp, 67 + 163],\n\t// \t\t\t\t[WarlockOptions_Summon.Succubus, 148 + 49],\n\t// \t\t\t])],\n\t// \t\t\t[50, new Map<WarlockOptions_Summon, number>([\n\t// \t\t\t\t[WarlockOptions_Summon.Imp, 67 + 163],\n\t// \t\t\t\t[WarlockOptions_Summon.Succubus, 148 + 49],\n\t// \t\t\t])],\n\t// \t\t\t[60, new Map<WarlockOptions_Summon, number>([\n\t// \t\t\t\t[WarlockOptions_Summon.Imp, 67 + 163],\n\t// \t\t\t\t[WarlockOptions_Summon.Succubus, 148 + 49],\n\t// \t\t\t])],\n\t// \t\t]);\n\n\t// \t\t// Base stats\n\t// \t\tlet currentTotal = petIntStaMap.get(player.getLevel())!.get(player.getSpecOptions().summon)!;\n\n\t// \t\t// Bonus item stats\n\t// \t\tlet trinketId = 216509\n\t// \t\tif (player.getEquippedItem(ItemSlot.ItemSlotTrinket1)?.id == trinketId || player.getEquippedItem(ItemSlot.ItemSlotTrinket2)?.id == trinketId) {\n\t// \t\t\tcurrentTotal = currentTotal + 100;\n\t// \t\t}\n\n\t// \t\t// Player scaled stats\n\t// \t\tlet playerStats = Stats.fromProto(player.getCurrentStats().finalStats)\n\t// \t\tcurrentTotal = currentTotal + playerStats.getStat(Stat.StatIntellect) * 0.3 + playerStats.getStat(Stat.StatStamina) * (player.getSpecOptions().summon == WarlockOptions_Summon.Imp ? 0.66 : 0.75)\n\t\t\t\n\t// \t\tstats = stats.addStat(Stat.StatSpellPower, currentTotal * 0.1);\n\t// \t}\n\n\t// \treturn {\n\t// \t\ttalents: stats,\n\t// \t};\n\t// },\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.18,\n\t\t\t[Stat.StatSpirit]: 0.54,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellDamage]: 1,\n\t\t\t[Stat.StatFirePower]: 1,\n\t\t\t[Stat.StatShadowPower]: 1,\n\t\t\t[Stat.StatSpellHit]: 0.93,\n\t\t\t[Stat.StatSpellCrit]: 0.53,\n\t\t\t[Stat.StatSpellHaste]: 0.81,\n\t\t\t[Stat.StatStamina]: 0.01,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\n\t\t// Default buffs and debuffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\tdebuffs: Presets.DefaultDebuffs,\n\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tWarlockInputs.PetInput,\n\t\tWarlockInputs.ImpFireboltRank,\n\t\tWarlockInputs.ArmorInput,\n\t\tWarlockInputs.WeaponImbueInput,\n\t],\n\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\t// Physical buffs that affect pets\n\t\tBuffDebuffInputs.MajorArmorDebuff,\n\t\tBuffDebuffInputs.CurseOfRecklessness,\n\t\tBuffDebuffInputs.FaerieFire,\n\t\tBuffDebuffInputs.PaladinPhysicalBuff,\n\t\tBuffDebuffInputs.StrengthBuffHorde,\n\t\tBuffDebuffInputs.BattleShoutBuff,\n\t\tBuffDebuffInputs.TrueshotAuraBuff,\n\t\tBuffDebuffInputs.MeleeCritBuff,\n\t\tBuffDebuffInputs.CurseOfVulnerability,\n\t\tBuffDebuffInputs.GiftOfArthas,\n\t\tBuffDebuffInputs.CrystalYield,\n\t\tBuffDebuffInputs.AncientCorrosivePoison,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BleedDebuff,\n\t\tBuffDebuffInputs.SpellWintersChillDebuff,\n\t\t...ConsumablesInputs.FROST_POWER_CONFIG,\n\t],\n\tpetConsumeInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\tOtherInputs.ChannelClipDelay,\n\t\t],\n\t},\n\titemSwapConfig: {\n\t\titemSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand, ItemSlot.ItemSlotRanged],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[CURRENT_PHASE],\n\t\t],\n\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[CURRENT_PHASE],\n\t\t],\n\t},\n\n\tautoRotation: (player) => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()][player.getTalentTree()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecWarlock,\n\t\t\ttooltip: 'Destruction DPS',\n\t\t\tdefaultName: 'Destruction',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 2),\n\n\t\t\ttalents: Presets.DestroMgiTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.FireImpGearPreset.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.FireImpGearPreset.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t},\n\t],\n});\n\nexport class WarlockSimUI extends IndividualSimUI<Spec.SpecWarlock> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarlock>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["ArmorInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","Armor","NoArmor","tooltip","actionId","ActionId","fromSpellId","DemonArmor","WeaponImbueInput","WeaponImbue","NoWeaponImbue","fromItemId","Firestone","Spellstone","PetInput","Summon","NoSummon","Imp","Voidwalker","Succubus","Felhunter","changeEmitter","player","ImpFireboltRank","showWhen","getSpecOptions","summon","MaxFireboltRank","NoMaximum","Rank1","Rank2","Rank3","Rank4","Rank5","Rank6","Rank7","GearDestructionPhase1","PresetUtils.makePresetGear","customCondition","getLevel","FireImpGearPreset","FireImpGear","FireSuccubusGearPreset","FireSuccubusGear","ShadowGearPreset","ShadowGear","GearPresets","Phase","Phase1","Phase2","DefaultGear","RotationDestructionPhase1","PresetUtils.makePresetAPLRotation","DestroP1APL","DestroMgiRotationPreset","DestroMgiAPL","DestroConflagRotationPreset","DestroConflagAPL","DemonologyRotationPreset","DemonologyAPL","AfflictionRotationPreset","AfflictionAPL","APLPresets","DefaultAPLs","DestroP1Talents","name","data","SavedTalents","create","talentsString","enableWhen","DestroMgiTalents","DestroConflagTalents","DemonologyTalents","AfflictionTalents","TalentPresets","DefaultTalents","DefaultOptions","WarlockOptions","armor","weaponImbue","WarlockWeaponImbue","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodSmokedSagefish","defaultPotion","Potions","GreaterManaPotion","mainHandImbue","LesserWizardOil","firePowerBuff","FirePowerBuff","ElixirOfFirepower","spellPowerBuff","SpellPowerBuff","LesserArcaneElixir","enchantedSigil","EnchantedSigil","InnovationSigil","agilityElixir","AgilityElixir","ElixirOfAgility","fillerExplosive","Explosive","ExplosiveEzThroRadiationBomb","DefaultRaidBuffs","RaidBuffs","powerWordFortitude","TristateEffect","TristateEffectImproved","giftOfTheWild","arcaneBrilliance","aspectOfTheLion","blessingOfWisdom","TristateEffectRegular","thorns","DefaultIndividualBuffs","IndividualBuffs","saygesFortune","SaygesFortune","SaygesDamage","sparkOfInspiration","DefaultDebuffs","Debuffs","homunculi","faerieFire","improvedScorch","curseOfElements","OtherDefaults","distanceFromTarget","profession1","Profession","Enchanting","profession2","Tailoring","channelClipDelay","SPEC_CONFIG","registerSpecConfig","Spec","SpecWarlock","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatStamina","StatSpirit","StatSpellPower","StatSpellDamage","StatFirePower","StatShadowPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","StatSpellPenetration","epReferenceStat","displayStats","StatHealth","StatMana","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","WarlockInputs.PetInput","WarlockInputs.ImpFireboltRank","WarlockInputs.ArmorInput","WarlockInputs.WeaponImbueInput","includeBuffDebuffInputs","BuffDebuffInputs.MajorArmorDebuff","BuffDebuffInputs.CurseOfRecklessness","BuffDebuffInputs.FaerieFire","BuffDebuffInputs.PaladinPhysicalBuff","BuffDebuffInputs.StrengthBuffHorde","BuffDebuffInputs.BattleShoutBuff","BuffDebuffInputs.TrueshotAuraBuff","BuffDebuffInputs.MeleeCritBuff","BuffDebuffInputs.CurseOfVulnerability","BuffDebuffInputs.GiftOfArthas","BuffDebuffInputs.CrystalYield","BuffDebuffInputs.AncientCorrosivePoison","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","BuffDebuffInputs.SpellWintersChillDebuff","ConsumablesInputs.FROST_POWER_CONFIG","petConsumeInputs","otherInputs","inputs","OtherInputs.DistanceFromTarget","OtherInputs.ChannelClipDelay","itemSwapConfig","itemSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","ItemSlotRanged","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","CURRENT_PHASE","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getTalentTree","rotation","raidSimPresets","spec","defaultName","iconUrl","getSpecIcon","Class","ClassWarlock","Presets.DestroMgiTalents","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","Presets.FireImpGearPreset","otherDefaults","WarlockSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"sgBAgBa,MAAAA,GAAaC,EAAmE,CAC5FC,UAAW,QACXC,OAAQ,CACP,CAAEC,MAAOC,EAAMC,QAASC,QAAS,YACjC,CAAEC,SAAU,IAAMC,EAASC,YAAY,OAAQN,MAAOC,EAAMM,eAIjDC,GAAmBX,EAAyE,CACxGC,UAAW,cACXC,OAAQ,CACP,CAAEC,MAAOS,EAAYC,cAAeP,QAAS,mBAE7C,CAAEC,SAAU,IAAMC,EAASM,WAAW,OAAQX,MAAOS,EAAYG,WACjE,CAAER,SAAU,IAAMC,EAASM,WAAW,OAAQX,MAAOS,EAAYI,eAItDC,GAAWjB,EAAoE,CAC3FC,UAAW,SACXC,OAAQ,CACP,CAAEC,MAAOe,EAAOC,SAAUb,QAAS,UACnC,CAAEC,SAAU,IAAMC,EAASC,YAAY,KAAMN,MAAOe,EAAOE,KAC3D,CAAEb,SAAU,IAAMC,EAASC,YAAY,KAAMN,MAAOe,EAAOG,YAC3D,CAAEd,SAAU,IAAMC,EAASC,YAAY,KAAMN,MAAOe,EAAOI,UAC3D,CAAEf,SAAU,IAAMC,EAASC,YAAY,KAAMN,MAAOe,EAAOK,YAE5DC,cAAgBC,GAAqCA,EAAOD,gBAGhDE,GAAkB1B,EAA6E,CAC3GC,UAAW,kBACX0B,SAAWF,GAAWA,EAAOG,iBAAiBC,QAAUX,EAAOE,IAC/DlB,OAAQ,CACP,CAAEC,MAAO2B,EAAgBC,UAAWzB,QAAS,OAC7C,CAAEC,SAAU,IAAMC,EAASC,YAAY,MAAON,MAAO2B,EAAgBE,OACrE,CAAEzB,SAAU,IAAMC,EAASC,YAAY,MAAON,MAAO2B,EAAgBG,OACrE,CAAE1B,SAAU,IAAMC,EAASC,YAAY,MAAON,MAAO2B,EAAgBI,OACrE,CAAE3B,SAAU,IAAMC,EAASC,YAAY,MAAON,MAAO2B,EAAgBK,OACrE,CAAE5B,SAAU,IAAMC,EAASC,YAAY,MAAON,MAAO2B,EAAgBM,OACrE,CAAE7B,SAAU,IAAMC,EAASC,YAAY,OAAQN,MAAO2B,EAAgBO,OACtE,CAAE9B,SAAU,IAAMC,EAASC,YAAY,OAAQN,MAAO2B,EAAgBQ,QAEvEd,cAAgBC,GAAqCA,EAAOD,6oUCThDe,GAAwBC,EAA2B,kVAAgC,CAAEC,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAEzHC,GAAoBH,EAA2B,WAAYI,GAAa,CAAEH,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAC9GG,GAAyBL,EAA2B,gBAAiBM,GAAkB,CAAEL,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAC7HK,GAAmBP,EAA2B,SAAUQ,GAAY,CAAEP,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAE1GO,GAAc,CACxB,CAACC,EAAMC,QAAS,CACjBZ,IAED,CAACW,EAAME,QAAS,CACfT,GACAE,GACAE,KAIWM,GAAcV,GAMdW,GAA4BC,EAAkC,cAAeC,GAAa,CAAEf,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAEhIe,GAA0BF,EAAkC,aAAcG,GAAc,CAAEjB,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAC9HiB,GAA8BJ,EAAkC,iBAAkBK,GAAkB,CAAEnB,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAC1ImB,GAA2BN,EAAkC,aAAcO,GAAe,CAAErB,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAChIqB,GAA2BR,EAAkC,aAAcS,GAAe,CAAEvB,gBAAkBhB,GAAgC,IAArBA,EAAOiB,aAEhIuB,GAAa,CACvB,CAACf,EAAMC,QAAS,CACjBG,IAED,CAACJ,EAAME,QAAS,CACfK,GACAE,GACAE,GACAE,KAIWG,GAA0E,CACpF,GAAI,CACL,EAAGZ,GACH,EAAGA,GACH,EAAGA,IAEF,GAAI,CACL,EAAGS,GACH,EAAGF,GACH,EAAGJ,KAWQU,GAAkB,CAACC,KAAM,iBAAkBC,KAAMC,EAAaC,OAAO,CAAEC,cAAe,gBAAkBC,WAAahD,GAA4C,IAArBA,EAAOiB,YAEnJgC,GAAmB,CAACN,KAAM,aAAcC,KAAMC,EAAaC,OAAO,CAAEC,cAAe,wBAA0BC,WAAahD,GAA4C,IAArBA,EAAOiB,YACxJiC,GAAuB,CAACP,KAAM,iBAAkBC,KAAMC,EAAaC,OAAO,CAAEC,cAAe,uBAAyBC,WAAahD,GAA4C,IAArBA,EAAOiB,YAC/JkC,GAAoB,CAACR,KAAM,aAAcC,KAAMC,EAAaC,OAAO,CAAEC,cAAe,sBAAwBC,WAAahD,GAA4C,IAArBA,EAAOiB,YACvJmC,GAAoB,CAACT,KAAM,aAAcC,KAAMC,EAAaC,OAAO,CAAEC,cAAe,wBAA0BC,WAAahD,GAA4C,IAArBA,EAAOiB,YAEzJoC,GAAgB,CAC1B,CAAC5B,EAAMC,QAAS,CACdgB,IAEF,CAACjB,EAAME,QAAS,CACjBsB,GACAC,GACAC,GACAC,KAIWE,GAAiBL,GAMjBM,GAAiBC,EAAeV,OAAO,CACnDW,MAAO9E,EAAMM,WACbmB,OAAQX,EAAOE,IACf+D,YAAaC,EAAmBvE,gBAGpBwE,GAAkBC,EAASf,OAAO,CAC9CgB,MAAOC,EAAMC,aACbC,KAAMC,EAAKC,mBACXC,cAAeC,EAAQC,kBACvBC,cAAepF,EAAYqF,gBAC3BC,cAAeC,EAAcC,kBAC7BC,eAAgBC,EAAeC,mBAC/BC,eAAgBC,EAAeC,gBAC/BC,cAAeC,EAAcC,gBAC7BC,gBAAiBC,EAAUC,+BAGfC,GAAmBC,EAAU3C,OAAO,CAChD4C,mBAAoBC,EAAeC,uBACnCC,cAAeF,EAAeC,uBAC9BE,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAkBL,EAAeM,sBACjCC,OAAQP,EAAeM,wBAGXE,GAAyBC,EAAgBtD,OAAO,CAC5DuD,cAAeC,EAAcC,aAC7BC,oBAAoB,IAGRC,GAAiBC,EAAQ5D,OAAO,CAC5C6D,UAAW,IACXC,YAAY,EACZC,gBAAgB,EAChBC,iBAAiB,IAGLC,GAAgB,CAC5BC,mBAAoB,GACpBC,YAAaC,EAAWC,WACxBC,YAAaF,EAAWG,UACxBC,iBAAkB,KC/JbC,GAAcC,EAAmBC,EAAKC,YAAa,CACxDC,SAAU,iBACVC,UAAW,UAEXC,YAAa,GAIbC,QAAS,CACRC,EAAKC,cACLD,EAAKE,YACLF,EAAKG,WACLH,EAAKI,eACLJ,EAAKK,gBACLL,EAAKM,cACLN,EAAKO,gBACLP,EAAKQ,aACLR,EAAKS,cACLT,EAAKU,eACLV,EAAKW,QACLX,EAAKY,sBAGNC,gBAAiBb,EAAKI,eAEtBU,aAAc,CACbd,EAAKe,WACLf,EAAKgB,SACLhB,EAAKC,cACLD,EAAKE,YACLF,EAAKG,WACLH,EAAKI,eACLJ,EAAKK,gBACLL,EAAKM,cACLN,EAAKO,gBACLP,EAAKQ,aACLR,EAAKS,cACLT,EAAKU,eACLV,EAAKY,qBACLZ,EAAKW,SAiDNM,SAAU,CAETC,KAAMC,GAAoBD,KAG1BE,UAAWC,EAAMC,QAAQ,CACxB,CAACtB,EAAKC,eAAgB,IACtB,CAACD,EAAKG,YAAa,IACnB,CAACH,EAAKI,gBAAiB,EACvB,CAACJ,EAAKK,iBAAkB,EACxB,CAACL,EAAKM,eAAgB,EACtB,CAACN,EAAKO,iBAAkB,EACxB,CAACP,EAAKQ,cAAe,IACrB,CAACR,EAAKS,eAAgB,IACtB,CAACT,EAAKU,gBAAiB,IACvB,CAACV,EAAKE,aAAc,MAGrBqB,SAAUC,GAEVC,QAASC,GAAuB7G,KAEhC8G,YAAaC,GAGbC,UAAWC,GAEXC,WAAYC,EAAWjH,OAAO,IAE9BkH,gBAAiBC,GAEjBC,QAASC,GAETC,MAAOC,IAIRC,iBAAkB,CACjBC,GACAC,GACAC,GACAC,IAIDC,wBAAyB,CAExBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEDC,wBAAyB,CACxBC,EACAC,KACGC,GAEJC,iBAAkB,GAGlBC,YAAa,CACZC,OAAQ,CACPC,EACAC,KAGFC,eAAgB,CACfC,UAAW,CAACC,EAASC,iBAAkBD,EAASE,gBAAiBF,EAASG,iBAE3EC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CAERjD,QAAS,IACLkD,GAAsBjL,EAAMC,WAC5BgL,GAAsBC,IAG1BC,UAAW,IACPC,GAAmBpL,EAAMC,WACzBmL,GAAmBF,IAIvB1D,KAAM,IACF6D,GAAoBrL,EAAMC,WAC1BoL,GAAoBH,KAIzBI,aAAe/M,GACPgN,GAAoBhN,EAAOiB,YAAYjB,EAAOiN,iBAAiBC,SAASA,SAGhFC,eAAgB,CACf,CACCC,KAAM3F,EAAKC,YACX7I,QAAS,kBACTwO,YAAa,cACbC,QAASC,EAAYC,EAAMC,aAAc,GAEzCjE,QAASkE,GAAyB9K,KAClC8G,YAAaC,GACbL,SAAUC,GACVoE,oBAAqB,CACpB,CAACC,EAAQC,SAAUC,EAAKC,YACxB,CAACH,EAAQI,UAAWF,EAAKG,UACzB,CAACL,EAAQM,OAAQJ,EAAKK,SAEvBC,YAAa,CACZ,CAACR,EAAQC,SAAU,CAAC,EACpB,CAACD,EAAQI,UAAW,CACnB,EAAGK,GAA0BpF,MAE9B,CAAC2E,EAAQM,OAAQ,CAChB,EAAGG,GAA0BpF,OAG/BqF,cAAejE,OAKX,MAAMkE,WAAqBC,GACjC,WAAAC,CAAYC,EAAyB1O,GAC9B2O,MAAAD,EAAY1O,EAAQuH,GAC3B"}