{"version":3,"file":"sim-f242f08a.chunk.js","sources":["../../../ui/elemental_shaman/presets.ts","../../../ui/elemental_shaman/sim.ts"],"sourcesContent":["import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n  Consumes,\n  Debuffs,\n  EnchantedSigil,\n  Flask,\n  Food,\n  Profession,\n  RaidBuffs,\n  TristateEffect,\n  WeaponImbue,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n  AirTotem,\n  EarthTotem,\n  ElementalShaman_Options as ElementalShamanOptions,\n  FireTotem,\n  ShamanShield,\n  ShamanTotems,\n  WaterTotem,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\n\nexport const GearPresets = {\n  [Phase.Phase1]: [\n    GearPhase1,\n  ],\n  [Phase.Phase2]: [\n    GearPhase2,\n  ]\n};\n\nexport const DefaultGear = GearPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase1AGAPL from './apls/phase_1_ag.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\nimport Phase2APLWithSwap from './apls/phase_2_swap.apl.json';\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase1AG = PresetUtils.makePresetAPLRotation('Phase 1 (AG)', Phase1AGAPL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\nexport const APLPhase2Swap = PresetUtils.makePresetAPLRotation('Phase 2 (Swap)', Phase2APLWithSwap);\n\nexport const APLPresets = {\n  [Phase.Phase1]: [\n    APLPhase1,\n    APLPhase1AG,\n  ],\n  [Phase.Phase2]: [\n    APLPhase2,\n    APLPhase2Swap,\n  ]\n};\n\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n  25: APLPresets[Phase.Phase1][0],\n  40: APLPresets[Phase.Phase2][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n  name: 'Phase 1',\n  data: SavedTalents.create({\n    talentsString: '25003105',\n  }),\n};\n\nexport const TalentsPhase2 = {\n  name: 'Phase 2',\n  data: SavedTalents.create({\n    talentsString: '550031550000151',\n  }),\n};\n\nexport const TalentPresets = {\n  [Phase.Phase1]: [\n    TalentsPhase1,\n  ],\n  [Phase.Phase2]: [\n    TalentsPhase2,\n  ]\n};\n\nexport const DefaultTalents = TalentPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = ElementalShamanOptions.create({\n  shield: ShamanShield.LightningShield,\n  totems: ShamanTotems.create({\n    earth: EarthTotem.StrengthOfEarthTotem,\n    fire: FireTotem.SearingTotem,\n    water: WaterTotem.HealingStreamTotem,\n    air: AirTotem.WindfuryTotem,\n  }),\n});\n\nexport const DefaultConsumes = Consumes.create({\n  flask: Flask.FlaskUnknown,\n\tfood: Food.FoodSagefishDelight,\n  enchantedSigil: EnchantedSigil.InnovationSigil,\n  mainHandImbue: WeaponImbue.LesserWizardOil,\n  offHandImbue: WeaponImbue.LesserWizardOil,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n  arcaneBrilliance: true,\n\taspectOfTheLion: true,\n  battleShout: TristateEffect.TristateEffectImproved,\n  divineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tleaderOfThePack: true,\n  manaSpringTotem: TristateEffect.TristateEffectImproved,\n\tmoonkinAura: true,\n  strengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfElements: true,\n  dreamstate: true,\n  improvedScorch: true,\n});\n\nexport const OtherDefaults = {\n  distanceFromTarget: 20,\n  profession1: Profession.Enchanting,\n  profession2: Profession.Leatherworking,\n}\n","import { ShamanShieldInput } from '../core/components/inputs/shaman_shields.js';\nimport { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n// import * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecElementalShaman, {\n\tcssClass: 'elemental-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpellPower,\n\t\tStat.StatFirePower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t\tStat.StatAttackPower,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatSpellCrit,\n\t\t\tplayer.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\trace: Race.RaceTroll,\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.14,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatFirePower]: 0.36,\n\t\t\t[Stat.StatNaturePower]: 0.64,\n\t\t\t[Stat.StatSpellHit]: 8.9,\n\t\t\t[Stat.StatSpellCrit]: 3.94,\n\t\t\t[Stat.StatSpellHaste]: 5.22,\n\t\t\t[Stat.StatMP5]: 0.08,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanShieldInput<Spec.SpecElementalShaman>(),\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BattleShoutBuff,\n\t\tBuffDebuffInputs.StrengthBuffHorde,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t],\n\t},\n\titemSwapConfig: {\n\t\titemSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\t\tnote: \"Swap items are given the highest available rank of Rockbiter Weapon\",\n\t},\n\tcustomSections: [\n\t\t// TotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[CURRENT_PHASE],\n\t\t],\n\t},\n\n\tautoRotation: (player) => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecElementalShaman,\n\t\t\ttooltip: specNames[Spec.SpecElementalShaman],\n\t\t\tdefaultName: 'Elemental',\n\t\t\ticonUrl: getSpecIcon(Class.ClassShaman, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceUnknown,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["GearBlank","PresetUtils.makePresetGear","GearPhase1","Phase1Gear","GearPhase2","Phase2Gear","GearPresets","Phase","Phase1","Phase2","DefaultGear","CURRENT_PHASE","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase1AG","Phase1AGAPL","APLPhase2","Phase2APL","APLPhase2Swap","Phase2APLWithSwap","APLPresets","DefaultAPLs","TalentsPhase1","name","data","SavedTalents","create","talentsString","TalentsPhase2","TalentPresets","DefaultTalents","DefaultOptions","ElementalShamanOptions","shield","ShamanShield","LightningShield","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","fire","FireTotem","SearingTotem","water","WaterTotem","HealingStreamTotem","air","AirTotem","WindfuryTotem","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodSagefishDelight","enchantedSigil","EnchantedSigil","InnovationSigil","mainHandImbue","WeaponImbue","LesserWizardOil","offHandImbue","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","battleShout","TristateEffect","TristateEffectImproved","divineSpirit","giftOfTheWild","leaderOfThePack","manaSpringTotem","moonkinAura","strengthOfEarthTotem","DefaultDebuffs","Debuffs","curseOfElements","dreamstate","improvedScorch","OtherDefaults","distanceFromTarget","profession1","Profession","Enchanting","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecElementalShaman","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatIntellect","StatSpellPower","StatFirePower","StatNaturePower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","StatAttackPower","modifyDisplayStats","player","stats","Stats","addStat","getTalents","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","race","Race","RaceTroll","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanShieldInput","includeBuffDebuffInputs","BuffDebuffInputs.BattleShoutBuff","BuffDebuffInputs.StrengthBuffHorde","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","itemSwapConfig","itemSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","note","customSections","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearBlank","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassShaman","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","Horde","defaultGear","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}