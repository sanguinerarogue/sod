{"version":3,"file":"sim-ab3f83d3.chunk.js","sources":["../../../ui/rogue/inputs.ts","../../../ui/rogue/presets.ts","../../../ui/rogue/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tRogue_Options_PoisonImbue as Poison,\n} from '../core/proto/rogue.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MainHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'mhImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Main Hand Poison' },\n\t\t{ actionId: () => ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: () => ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: () => ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const OffHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'ohImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Off Hand Poison' },\n\t\t{ actionId: () => ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: () => ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: () => ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const ApplyPoisonsManually = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecRogue>({\n\tfieldName: 'applyPoisonsManually',\n\tlabel: 'Configure poisons manually',\n\tlabelTooltip: 'Prevent automatic poison configuration that is based on equipped weapons.',\n});\n","import { Phase } from '../core/constants/other.js';\nimport {\n\tConsumes,\n\tFlask,\n\tFood,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRogue_Options_PoisonImbue as Poison,\n\tRogue_Options as RogueOptions,\n} from '../core/proto/rogue.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\n\nimport CombatApl from './apls/combat.apl.json';\nimport CombatCleaveSndApl from './apls/combat_cleave_snd.apl.json';\nimport CombatCleaveSndExposeApl from './apls/combat_cleave_snd_expose.apl.json';\nimport CombatExposeApl from './apls/combat_expose.apl.json';\nimport FanAoeApl from './apls/fan_aoe.apl.json';\nimport MutilateApl from './apls/mutilate.apl.json';\nimport MutilateExposeApl from './apls/mutilate_expose.apl.json';\nimport RuptureMutilateApl from './apls/rupture_mutilate.apl.json';\nimport RuptureMutilateExposeApl from './apls/rupture_mutilate_expose.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\n\nexport const GearPresets = {\n  [Phase.Phase1]: [\n    GearBlank,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultGear = GearPresets[Phase.Phase1][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const ROTATION_PRESET_MUTILATE = PresetUtils.makePresetAPLRotation('Mutilate', MutilateApl, { talentTree: 0 });\nexport const ROTATION_PRESET_RUPTURE_MUTILATE = PresetUtils.makePresetAPLRotation('Rupture Mutilate', RuptureMutilateApl, { talentTree: 0 });\nexport const ROTATION_PRESET_MUTILATE_EXPOSE = PresetUtils.makePresetAPLRotation('Mutilate w/ Expose', MutilateExposeApl, { talentTree: 0 });\nexport const ROTATION_PRESET_RUPTURE_MUTILATE_EXPOSE = PresetUtils.makePresetAPLRotation('Rupture Mutilate w/ Expose', RuptureMutilateExposeApl, { talentTree: 0 });\nexport const ROTATION_PRESET_COMBAT = PresetUtils.makePresetAPLRotation('Combat', CombatApl, { talentTree: 1 });\nexport const ROTATION_PRESET_COMBAT_EXPOSE = PresetUtils.makePresetAPLRotation('Combat w/ Expose', CombatExposeApl, { talentTree: 1 });\nexport const ROTATION_PRESET_COMBAT_CLEAVE_SND = PresetUtils.makePresetAPLRotation('Combat Cleave SND', CombatCleaveSndApl, { talentTree: 1 });\nexport const ROTATION_PRESET_COMBAT_CLEAVE_SND_EXPOSE = PresetUtils.makePresetAPLRotation('Combat Cleave SND w/ Expose', CombatCleaveSndExposeApl, { talentTree: 1 });\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('Fan AOE', FanAoeApl);\n\nexport const APLPresets = {\n  [Phase.Phase1]: [\n    ROTATION_PRESET_MUTILATE,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultAPLs: Record<number, Record<number, PresetUtils.PresetRotation>> = {\n  25: {\n\t\t0: APLPresets[Phase.Phase1][0],\n\t\t1: APLPresets[Phase.Phase1][0],\n\t\t2: APLPresets[Phase.Phase1][0],\n\t},\n  40: {\n\t\t0: APLPresets[Phase.Phase1][0],\n\t\t1: APLPresets[Phase.Phase1][0],\n\t\t2: APLPresets[Phase.Phase1][0],\n\t}\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const CombatHackTalents = {\n\tname: 'Combat Axes/Swords',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532010414-0252051000035015223100501251',\n\t}),\n};\n\nexport const CombatCQCTalents = {\n\tname: 'Combat Fists',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532010414-0252051050035010223100501251',\n\t}),\n};\n\nexport const AssassinationTalents137 = {\n\tname: 'Assassination 13/7',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103331051-005005003-502',\n\t}),\n};\n\nexport const AssassinationTalents182 = {\n\tname: 'Assassination 18/2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103331051-005005005003-2',\n\t}),\n};\n\nexport const AssassinationTalentsBF = {\n\tname: 'Assassination Blade Flurry',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103231-005205005003001-501',\n\t}),\n};\n\nexport const SubtletyTalents = {\n\tname: 'Subtlety',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30532010114--5022012030321121350115031151',\n\t}),\n}\n\nexport const HemoSubtletyTalents = {\n\tname: 'Hemo Sub',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30532010135--502201203032112135011503122',\n\t}),\n}\n\nexport const TalentPresets = {\n  [Phase.Phase1]: [\n    AssassinationTalents137,\n\t\tCombatHackTalents,\n\t\tSubtletyTalents,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultTalentsAssassin = TalentPresets[Phase.Phase1][0];\nexport const DefaultTalentsCombat \t= TalentPresets[Phase.Phase1][1];\nexport const DefaultTalentsSubtlety = TalentPresets[Phase.Phase1][2];\n\nexport const DefaultTalents = DefaultTalentsAssassin;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = RogueOptions.create({\n\tmhImbue: Poison.DeadlyPoison,\n\tohImbue: Poison.InstantPoison,\n\tapplyPoisonsManually: false,\n\tstartingOverkillDuration: 20,\n\tvanishBreakTime: 0.1,\n\thonorOfThievesCritRate: 400,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n","import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tClass, \n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n\tWeaponType\n} from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport {\n\tRogue_Options_PoisonImbue,\n} from '../core/proto/rogue.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as RogueInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecRogue, {\n\tcssClass: 'rogue-sim-ui',\n\tcssScheme: 'rogue',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t'Rotations are not fully optimized, especially for non-standard setups.',\n\t],\n\twarnings: [\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tlet hasNoArmor = false\n\t\t\t\t\tfor (const target of simUI.sim.encounter.targets) {\n\t\t\t\t\t\tif (new Stats(target.stats).getStat(Stat.StatArmor) <= 0) {\n\t\t\t\t\t\t\thasNoArmor = true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasNoArmor) {\n\t\t\t\t\t\treturn 'One or more targets have no armor. Check advanced encounter settings.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getTalents().maceSpecialization) {\n\t\t\t\t\t\tif (simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeMace ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeMace) {\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn '\"Mace Specialization\" talent selected, but maces not equipped.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tconst mhWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\t\tconst ohWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\t\tconst mhImbue = simUI.player.getSpecOptions().mhImbue;\n\t\t\t\t\tconst ohImbue = simUI.player.getSpecOptions().ohImbue;\n\t\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined' || !simUI.player.getSpecOptions().applyPoisonsManually) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tif (mhWeaponSpeed < ohWeaponSpeed && ohImbue == Rogue_Options_PoisonImbue.DeadlyPoison) {\n\t\t\t\t\t\treturn 'Deadly poison applied to slower (off hand) weapon.';\n\t\t\t\t\t}\n\t\t\t\t\tif (ohWeaponSpeed < mhWeaponSpeed && mhImbue == Rogue_Options_PoisonImbue.DeadlyPoison) {\n\t\t\t\t\t\treturn 'Deadly poison applied to slower (main hand) weapon.';\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatAgility]: 1.86,\n\t\t\t[Stat.StatStrength]: 1.14,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.28,\n\t\t\t[Stat.StatSpellHit]: 0.08,\n\t\t\t[Stat.StatMeleeHit]: 1.39,\n\t\t\t[Stat.StatMeleeCrit]: 1.32,\n\t\t\t[Stat.StatMeleeHaste]: 1.48,\n\t\t\t[Stat.StatArmorPenetration]: 0.84,\n\t\t\t[Stat.StatExpertise]: 0.98,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.94,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.45,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.AssassinationTalents137.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectRegular,\n\t\t\tmoonkinAura: true,\n\t\t\tleaderOfThePack: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tsunderArmor: true,\n\t\t\tfaerieFire: true,\n\t\t}),\n\t},\n\n\tplayerInputs: {\n\t\tinputs: [\n\t\t\tRogueInputs.ApplyPoisonsManually\n\t\t]\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tRogueInputs.MainHandImbue,\n\t\tRogueInputs.OffHandImbue,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.SpellCritBuff,\n\t\tBuffDebuffInputs.SpellISBDebuff\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[CURRENT_PHASE],\n\t\t],\n\t},\n\n\tautoRotation: (player) => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()][player.getTalentTree()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Assassination Rogue',\n\t\t\tdefaultName: 'Assassination',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 0),\n\n\t\t\ttalents: Presets.DefaultTalentsAssassin.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Combat Rogue',\n\t\t\tdefaultName: 'Combat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 1),\n\n\t\t\ttalents: Presets.DefaultTalentsCombat.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class RogueSimUI extends IndividualSimUI<Spec.SpecRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRogue>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t\tthis.player.changeEmitter.on((c) => {\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t\tthis.sim.encounter.changeEmitter.on((c) => {\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t}\n}\n"],"names":["MainHandImbue","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Poison","NoPoison","tooltip","actionId","ActionId","fromItemId","DeadlyPoison","InstantPoison","WoundPoison","OffHandImbue","ApplyPoisonsManually","InputHelpers.makeSpecOptionsBooleanInput","label","labelTooltip","GearBlank","PresetUtils.makePresetGear","GearPresets","Phase","Phase1","Phase2","DefaultGear","ROTATION_PRESET_MUTILATE","PresetUtils.makePresetAPLRotation","MutilateApl","talentTree","RuptureMutilateApl","MutilateExposeApl","RuptureMutilateExposeApl","CombatApl","CombatExposeApl","CombatCleaveSndApl","CombatCleaveSndExposeApl","FanAoeApl","APLPresets","DefaultAPLs","CombatHackTalents","name","data","SavedTalents","create","talentsString","AssassinationTalents137","SubtletyTalents","TalentPresets","DefaultTalentsAssassin","DefaultTalentsCombat","DefaultOptions","RogueOptions","mhImbue","ohImbue","applyPoisonsManually","startingOverkillDuration","vanishBreakTime","honorOfThievesCritRate","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","SPEC_CONFIG","registerSpecConfig","Spec","SpecRogue","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","sim","encounter","changeEmitter","getContent","hasNoArmor","target","targets","Stats","stats","getStat","Stat","StatArmor","player","getTalents","maceSpecialization","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponType","WeaponType","WeaponTypeMace","ItemSlotOffHand","mhWeaponSpeed","weaponSpeed","ohWeaponSpeed","getSpecOptions","Rogue_Options_PoisonImbue","epStats","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatSpellHit","StatSpellCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.AssassinationTalents137","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","strengthOfEarthTotem","TristateEffectRegular","moonkinAura","leaderOfThePack","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","sunderArmor","faerieFire","playerInputs","inputs","RogueInputs.ApplyPoisonsManually","playerIconInputs","RogueInputs.MainHandImbue","RogueInputs.OffHandImbue","includeBuffDebuffInputs","BuffDebuffInputs.SpellCritBuff","BuffDebuffInputs.SpellISBDebuff","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","CURRENT_PHASE","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getLevel","getTalentTree","rotation","raidSimPresets","spec","defaultName","iconUrl","getSpecIcon","Class","ClassRogue","Presets.DefaultTalentsAssassin","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","Presets.DefaultTalentsCombat","RogueSimUI","IndividualSimUI","constructor","parentElem","super","this","on","c","options","length","setSpecOptions"],"mappings":"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"}